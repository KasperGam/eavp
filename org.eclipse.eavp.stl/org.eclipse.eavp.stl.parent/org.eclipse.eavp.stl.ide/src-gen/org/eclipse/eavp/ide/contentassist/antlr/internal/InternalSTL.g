/*
 * generated by Xtext 2.9.1
 */
grammar InternalSTL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.eclipse.eavp.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.eavp.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.eavp.services.STLGrammarAccess;

}
@parser::members {
	private STLGrammarAccess grammarAccess;

	public void setGrammarAccess(STLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTriangle
entryRuleTriangle
:
{ before(grammarAccess.getTriangleRule()); }
	 ruleTriangle
{ after(grammarAccess.getTriangleRule()); } 
	 EOF 
;

// Rule Triangle
ruleTriangle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTriangleAccess().getGroup()); }
		(rule__Triangle__Group__0)
		{ after(grammarAccess.getTriangleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNormal
entryRuleNormal
:
{ before(grammarAccess.getNormalRule()); }
	 ruleNormal
{ after(grammarAccess.getNormalRule()); } 
	 EOF 
;

// Rule Normal
ruleNormal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNormalAccess().getGroup()); }
		(rule__Normal__Group__0)
		{ after(grammarAccess.getNormalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVector
entryRuleVector
:
{ before(grammarAccess.getVectorRule()); }
	 ruleVector
{ after(grammarAccess.getVectorRule()); } 
	 EOF 
;

// Rule Vector
ruleVector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVectorAccess().getGroup()); }
		(rule__Vector__Group__0)
		{ after(grammarAccess.getVectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVerticies
entryRuleVerticies
:
{ before(grammarAccess.getVerticiesRule()); }
	 ruleVerticies
{ after(grammarAccess.getVerticiesRule()); } 
	 EOF 
;

// Rule Verticies
ruleVerticies 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVerticiesAccess().getGroup()); }
		(rule__Verticies__Group__0)
		{ after(grammarAccess.getVerticiesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertex
entryRuleVertex
:
{ before(grammarAccess.getVertexRule()); }
	 ruleVertex
{ after(grammarAccess.getVertexRule()); } 
	 EOF 
;

// Rule Vertex
ruleVertex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexAccess().getGroup()); }
		(rule__Vertex__Group__0)
		{ after(grammarAccess.getVertexAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getSolidKeyword_0()); }
	'solid'
	{ after(grammarAccess.getModelAccess().getSolidKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
	(rule__Model__NameAssignment_1)?
	{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getTrianglesAssignment_2()); }
	(rule__Model__TrianglesAssignment_2)*
	{ after(grammarAccess.getModelAccess().getTrianglesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getEndsolidKeyword_3()); }
	'endsolid'
	{ after(grammarAccess.getModelAccess().getEndsolidKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getIDTerminalRuleCall_4()); }
	RULE_ID
	{ after(grammarAccess.getModelAccess().getIDTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Triangle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triangle__Group__0__Impl
	rule__Triangle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Triangle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriangleAccess().getFacetKeyword_0()); }
	'facet'
	{ after(grammarAccess.getTriangleAccess().getFacetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triangle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triangle__Group__1__Impl
	rule__Triangle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Triangle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriangleAccess().getNormalAssignment_1()); }
	(rule__Triangle__NormalAssignment_1)
	{ after(grammarAccess.getTriangleAccess().getNormalAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triangle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triangle__Group__2__Impl
	rule__Triangle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Triangle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriangleAccess().getVerticiesAssignment_2()); }
	(rule__Triangle__VerticiesAssignment_2)
	{ after(grammarAccess.getTriangleAccess().getVerticiesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triangle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triangle__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Triangle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriangleAccess().getEndfacetKeyword_3()); }
	'endfacet'
	{ after(grammarAccess.getTriangleAccess().getEndfacetKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Normal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Normal__Group__0__Impl
	rule__Normal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Normal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNormalAccess().getNormalKeyword_0()); }
	'normal'
	{ after(grammarAccess.getNormalAccess().getNormalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Normal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Normal__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Normal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNormalAccess().getVectorAssignment_1()); }
	(rule__Normal__VectorAssignment_1)
	{ after(grammarAccess.getNormalAccess().getVectorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__0__Impl
	rule__Vector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getXAssignment_0()); }
	(rule__Vector__XAssignment_0)
	{ after(grammarAccess.getVectorAccess().getXAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__1__Impl
	rule__Vector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getYAssignment_1()); }
	(rule__Vector__YAssignment_1)
	{ after(grammarAccess.getVectorAccess().getYAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getZAssignment_2()); }
	(rule__Vector__ZAssignment_2)
	{ after(grammarAccess.getVectorAccess().getZAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Verticies__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verticies__Group__0__Impl
	rule__Verticies__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerticiesAccess().getOuterKeyword_0()); }
	'outer'
	{ after(grammarAccess.getVerticiesAccess().getOuterKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verticies__Group__1__Impl
	rule__Verticies__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerticiesAccess().getLoopKeyword_1()); }
	'loop'
	{ after(grammarAccess.getVerticiesAccess().getLoopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verticies__Group__2__Impl
	rule__Verticies__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerticiesAccess().getV1Assignment_2()); }
	(rule__Verticies__V1Assignment_2)
	{ after(grammarAccess.getVerticiesAccess().getV1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verticies__Group__3__Impl
	rule__Verticies__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerticiesAccess().getV2Assignment_3()); }
	(rule__Verticies__V2Assignment_3)
	{ after(grammarAccess.getVerticiesAccess().getV2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verticies__Group__4__Impl
	rule__Verticies__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerticiesAccess().getV3Assignment_4()); }
	(rule__Verticies__V3Assignment_4)
	{ after(grammarAccess.getVerticiesAccess().getV3Assignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verticies__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerticiesAccess().getEndloopKeyword_5()); }
	'endloop'
	{ after(grammarAccess.getVerticiesAccess().getEndloopKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vertex__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__0__Impl
	rule__Vertex__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getVertexKeyword_0()); }
	'vertex'
	{ after(grammarAccess.getVertexAccess().getVertexKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__1__Impl
	rule__Vertex__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getXAssignment_1()); }
	(rule__Vertex__XAssignment_1)
	{ after(grammarAccess.getVertexAccess().getXAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__2__Impl
	rule__Vertex__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getYAssignment_2()); }
	(rule__Vertex__YAssignment_2)
	{ after(grammarAccess.getVertexAccess().getYAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getZAssignment_3()); }
	(rule__Vertex__ZAssignment_3)
	{ after(grammarAccess.getVertexAccess().getZAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__TrianglesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTrianglesTriangleParserRuleCall_2_0()); }
		ruleTriangle
		{ after(grammarAccess.getModelAccess().getTrianglesTriangleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triangle__NormalAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriangleAccess().getNormalNormalParserRuleCall_1_0()); }
		ruleNormal
		{ after(grammarAccess.getTriangleAccess().getNormalNormalParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triangle__VerticiesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriangleAccess().getVerticiesVerticiesParserRuleCall_2_0()); }
		ruleVerticies
		{ after(grammarAccess.getTriangleAccess().getVerticiesVerticiesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Normal__VectorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNormalAccess().getVectorVectorParserRuleCall_1_0()); }
		ruleVector
		{ after(grammarAccess.getNormalAccess().getVectorVectorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__XAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getXDOUBLETerminalRuleCall_0_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getVectorAccess().getXDOUBLETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__YAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getYDOUBLETerminalRuleCall_1_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getVectorAccess().getYDOUBLETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__ZAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getZDOUBLETerminalRuleCall_2_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getVectorAccess().getZDOUBLETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__V1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerticiesAccess().getV1VertexParserRuleCall_2_0()); }
		ruleVertex
		{ after(grammarAccess.getVerticiesAccess().getV1VertexParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__V2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerticiesAccess().getV2VertexParserRuleCall_3_0()); }
		ruleVertex
		{ after(grammarAccess.getVerticiesAccess().getV2VertexParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verticies__V3Assignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerticiesAccess().getV3VertexParserRuleCall_4_0()); }
		ruleVertex
		{ after(grammarAccess.getVerticiesAccess().getV3VertexParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__XAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexAccess().getXDOUBLETerminalRuleCall_1_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getVertexAccess().getXDOUBLETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__YAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexAccess().getYDOUBLETerminalRuleCall_2_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getVertexAccess().getYDOUBLETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__ZAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexAccess().getZDOUBLETerminalRuleCall_3_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getVertexAccess().getZDOUBLETerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : '-'? ('0'..'9')* '.' ('0'..'9')* (('e'|'E') ('-'|'+')? ('0'..'9')*)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
