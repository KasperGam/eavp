/*
 * generated by Xtext 2.9.1
 */
package org.eclipse.eavp.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.eavp.ide.contentassist.antlr.internal.InternalSTLParser;
import org.eclipse.eavp.services.STLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class STLParser extends AbstractContentAssistParser {

	@Inject
	private STLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSTLParser createParser() {
		InternalSTLParser result = new InternalSTLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getTriangleAccess().getGroup(), "rule__Triangle__Group__0");
					put(grammarAccess.getNormalAccess().getGroup(), "rule__Normal__Group__0");
					put(grammarAccess.getVectorAccess().getGroup(), "rule__Vector__Group__0");
					put(grammarAccess.getVerticiesAccess().getGroup(), "rule__Verticies__Group__0");
					put(grammarAccess.getVertexAccess().getGroup(), "rule__Vertex__Group__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getTrianglesAssignment_2(), "rule__Model__TrianglesAssignment_2");
					put(grammarAccess.getTriangleAccess().getNormalAssignment_1(), "rule__Triangle__NormalAssignment_1");
					put(grammarAccess.getTriangleAccess().getVerticiesAssignment_2(), "rule__Triangle__VerticiesAssignment_2");
					put(grammarAccess.getNormalAccess().getVectorAssignment_1(), "rule__Normal__VectorAssignment_1");
					put(grammarAccess.getVectorAccess().getXAssignment_0(), "rule__Vector__XAssignment_0");
					put(grammarAccess.getVectorAccess().getYAssignment_1(), "rule__Vector__YAssignment_1");
					put(grammarAccess.getVectorAccess().getZAssignment_2(), "rule__Vector__ZAssignment_2");
					put(grammarAccess.getVerticiesAccess().getV1Assignment_2(), "rule__Verticies__V1Assignment_2");
					put(grammarAccess.getVerticiesAccess().getV2Assignment_3(), "rule__Verticies__V2Assignment_3");
					put(grammarAccess.getVerticiesAccess().getV3Assignment_4(), "rule__Verticies__V3Assignment_4");
					put(grammarAccess.getVertexAccess().getXAssignment_1(), "rule__Vertex__XAssignment_1");
					put(grammarAccess.getVertexAccess().getYAssignment_2(), "rule__Vertex__YAssignment_2");
					put(grammarAccess.getVertexAccess().getZAssignment_3(), "rule__Vertex__ZAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSTLParser typedParser = (InternalSTLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public STLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(STLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
