/*
 * generated by Xtext 2.9.1
 */
grammar InternalSTL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.eavp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.eavp.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.eavp.services.STLGrammarAccess;

}

@parser::members {

 	private STLGrammarAccess grammarAccess;

    public InternalSTLParser(TokenStream input, STLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected STLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='solid'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getSolidKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTrianglesTriangleParserRuleCall_2_0());
				}
				lv_triangles_2_0=ruleTriangle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"triangles",
						lv_triangles_2_0,
						"org.eclipse.eavp.STL.Triangle");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='endsolid'
		{
			newLeafNode(otherlv_3, grammarAccess.getModelAccess().getEndsolidKeyword_3());
		}
		this_ID_4=RULE_ID
		{
			newLeafNode(this_ID_4, grammarAccess.getModelAccess().getIDTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleTriangle
entryRuleTriangle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTriangleRule()); }
	iv_ruleTriangle=ruleTriangle
	{ $current=$iv_ruleTriangle.current; }
	EOF;

// Rule Triangle
ruleTriangle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='facet'
		{
			newLeafNode(otherlv_0, grammarAccess.getTriangleAccess().getFacetKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTriangleAccess().getNormalNormalParserRuleCall_1_0());
				}
				lv_normal_1_0=ruleNormal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriangleRule());
					}
					set(
						$current,
						"normal",
						lv_normal_1_0,
						"org.eclipse.eavp.STL.Normal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTriangleAccess().getVerticiesVerticiesParserRuleCall_2_0());
				}
				lv_verticies_2_0=ruleVerticies
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriangleRule());
					}
					set(
						$current,
						"verticies",
						lv_verticies_2_0,
						"org.eclipse.eavp.STL.Verticies");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='endfacet'
		{
			newLeafNode(otherlv_3, grammarAccess.getTriangleAccess().getEndfacetKeyword_3());
		}
	)
;

// Entry rule entryRuleNormal
entryRuleNormal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNormalRule()); }
	iv_ruleNormal=ruleNormal
	{ $current=$iv_ruleNormal.current; }
	EOF;

// Rule Normal
ruleNormal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='normal'
		{
			newLeafNode(otherlv_0, grammarAccess.getNormalAccess().getNormalKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNormalAccess().getVectorVectorParserRuleCall_1_0());
				}
				lv_vector_1_0=ruleVector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNormalRule());
					}
					set(
						$current,
						"vector",
						lv_vector_1_0,
						"org.eclipse.eavp.STL.Vector");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVector
entryRuleVector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVectorRule()); }
	iv_ruleVector=ruleVector
	{ $current=$iv_ruleVector.current; }
	EOF;

// Rule Vector
ruleVector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_x_0_0=RULE_DOUBLE
				{
					newLeafNode(lv_x_0_0, grammarAccess.getVectorAccess().getXDOUBLETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVectorRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_0_0,
						"org.eclipse.eavp.STL.DOUBLE");
				}
			)
		)
		(
			(
				lv_y_1_0=RULE_DOUBLE
				{
					newLeafNode(lv_y_1_0, grammarAccess.getVectorAccess().getYDOUBLETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVectorRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_1_0,
						"org.eclipse.eavp.STL.DOUBLE");
				}
			)
		)
		(
			(
				lv_z_2_0=RULE_DOUBLE
				{
					newLeafNode(lv_z_2_0, grammarAccess.getVectorAccess().getZDOUBLETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVectorRule());
					}
					setWithLastConsumed(
						$current,
						"z",
						lv_z_2_0,
						"org.eclipse.eavp.STL.DOUBLE");
				}
			)
		)
	)
;

// Entry rule entryRuleVerticies
entryRuleVerticies returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVerticiesRule()); }
	iv_ruleVerticies=ruleVerticies
	{ $current=$iv_ruleVerticies.current; }
	EOF;

// Rule Verticies
ruleVerticies returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='outer'
		{
			newLeafNode(otherlv_0, grammarAccess.getVerticiesAccess().getOuterKeyword_0());
		}
		otherlv_1='loop'
		{
			newLeafNode(otherlv_1, grammarAccess.getVerticiesAccess().getLoopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVerticiesAccess().getV1VertexParserRuleCall_2_0());
				}
				lv_v1_2_0=ruleVertex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVerticiesRule());
					}
					set(
						$current,
						"v1",
						lv_v1_2_0,
						"org.eclipse.eavp.STL.Vertex");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVerticiesAccess().getV2VertexParserRuleCall_3_0());
				}
				lv_v2_3_0=ruleVertex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVerticiesRule());
					}
					set(
						$current,
						"v2",
						lv_v2_3_0,
						"org.eclipse.eavp.STL.Vertex");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVerticiesAccess().getV3VertexParserRuleCall_4_0());
				}
				lv_v3_4_0=ruleVertex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVerticiesRule());
					}
					set(
						$current,
						"v3",
						lv_v3_4_0,
						"org.eclipse.eavp.STL.Vertex");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='endloop'
		{
			newLeafNode(otherlv_5, grammarAccess.getVerticiesAccess().getEndloopKeyword_5());
		}
	)
;

// Entry rule entryRuleVertex
entryRuleVertex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexRule()); }
	iv_ruleVertex=ruleVertex
	{ $current=$iv_ruleVertex.current; }
	EOF;

// Rule Vertex
ruleVertex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='vertex'
		{
			newLeafNode(otherlv_0, grammarAccess.getVertexAccess().getVertexKeyword_0());
		}
		(
			(
				lv_x_1_0=RULE_DOUBLE
				{
					newLeafNode(lv_x_1_0, grammarAccess.getVertexAccess().getXDOUBLETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVertexRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_1_0,
						"org.eclipse.eavp.STL.DOUBLE");
				}
			)
		)
		(
			(
				lv_y_2_0=RULE_DOUBLE
				{
					newLeafNode(lv_y_2_0, grammarAccess.getVertexAccess().getYDOUBLETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVertexRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_2_0,
						"org.eclipse.eavp.STL.DOUBLE");
				}
			)
		)
		(
			(
				lv_z_3_0=RULE_DOUBLE
				{
					newLeafNode(lv_z_3_0, grammarAccess.getVertexAccess().getZDOUBLETerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVertexRule());
					}
					setWithLastConsumed(
						$current,
						"z",
						lv_z_3_0,
						"org.eclipse.eavp.STL.DOUBLE");
				}
			)
		)
	)
;

RULE_DOUBLE : '-'? ('0'..'9')* '.' ('0'..'9')* (('e'|'E') ('-'|'+')? ('0'..'9')*)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
