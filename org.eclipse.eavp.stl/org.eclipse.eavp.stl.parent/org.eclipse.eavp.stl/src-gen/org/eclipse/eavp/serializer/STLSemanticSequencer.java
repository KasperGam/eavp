/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.eavp.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.eavp.sTL.Model;
import org.eclipse.eavp.sTL.Normal;
import org.eclipse.eavp.sTL.STLPackage;
import org.eclipse.eavp.sTL.Triangle;
import org.eclipse.eavp.sTL.Vector;
import org.eclipse.eavp.sTL.Vertex;
import org.eclipse.eavp.sTL.Verticies;
import org.eclipse.eavp.services.STLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class STLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private STLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == STLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case STLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case STLPackage.NORMAL:
				sequence_Normal(context, (Normal) semanticObject); 
				return; 
			case STLPackage.TRIANGLE:
				sequence_Triangle(context, (Triangle) semanticObject); 
				return; 
			case STLPackage.VECTOR:
				sequence_Vector(context, (Vector) semanticObject); 
				return; 
			case STLPackage.VERTEX:
				sequence_Vertex(context, (Vertex) semanticObject); 
				return; 
			case STLPackage.VERTICIES:
				sequence_Verticies(context, (Verticies) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID? triangles+=Triangle*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Normal returns Normal
	 *
	 * Constraint:
	 *     vector=Vector
	 */
	protected void sequence_Normal(ISerializationContext context, Normal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STLPackage.Literals.NORMAL__VECTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STLPackage.Literals.NORMAL__VECTOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalAccess().getVectorVectorParserRuleCall_1_0(), semanticObject.getVector());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Triangle returns Triangle
	 *
	 * Constraint:
	 *     (normal=Normal verticies=Verticies)
	 */
	protected void sequence_Triangle(ISerializationContext context, Triangle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STLPackage.Literals.TRIANGLE__NORMAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STLPackage.Literals.TRIANGLE__NORMAL));
			if (transientValues.isValueTransient(semanticObject, STLPackage.Literals.TRIANGLE__VERTICIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STLPackage.Literals.TRIANGLE__VERTICIES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTriangleAccess().getNormalNormalParserRuleCall_1_0(), semanticObject.getNormal());
		feeder.accept(grammarAccess.getTriangleAccess().getVerticiesVerticiesParserRuleCall_2_0(), semanticObject.getVerticies());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vector returns Vector
	 *
	 * Constraint:
	 *     (x=DOUBLE y=DOUBLE z=DOUBLE)
	 */
	protected void sequence_Vector(ISerializationContext context, Vector semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STLPackage.Literals.VECTOR__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STLPackage.Literals.VECTOR__X));
			if (transientValues.isValueTransient(semanticObject, STLPackage.Literals.VECTOR__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STLPackage.Literals.VECTOR__Y));
			if (transientValues.isValueTransient(semanticObject, STLPackage.Literals.VECTOR__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STLPackage.Literals.VECTOR__Z));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVectorAccess().getXDOUBLETerminalRuleCall_0_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getVectorAccess().getYDOUBLETerminalRuleCall_1_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getVectorAccess().getZDOUBLETerminalRuleCall_2_0(), semanticObject.getZ());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vertex returns Vertex
	 *
	 * Constraint:
	 *     (x=DOUBLE y=DOUBLE z=DOUBLE)
	 */
	protected void sequence_Vertex(ISerializationContext context, Vertex semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STLPackage.Literals.VERTEX__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STLPackage.Literals.VERTEX__X));
			if (transientValues.isValueTransient(semanticObject, STLPackage.Literals.VERTEX__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STLPackage.Literals.VERTEX__Y));
			if (transientValues.isValueTransient(semanticObject, STLPackage.Literals.VERTEX__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STLPackage.Literals.VERTEX__Z));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVertexAccess().getXDOUBLETerminalRuleCall_1_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getVertexAccess().getYDOUBLETerminalRuleCall_2_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getVertexAccess().getZDOUBLETerminalRuleCall_3_0(), semanticObject.getZ());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Verticies returns Verticies
	 *
	 * Constraint:
	 *     (v1=Vertex v2=Vertex v3=Vertex)
	 */
	protected void sequence_Verticies(ISerializationContext context, Verticies semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STLPackage.Literals.VERTICIES__V1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STLPackage.Literals.VERTICIES__V1));
			if (transientValues.isValueTransient(semanticObject, STLPackage.Literals.VERTICIES__V2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STLPackage.Literals.VERTICIES__V2));
			if (transientValues.isValueTransient(semanticObject, STLPackage.Literals.VERTICIES__V3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STLPackage.Literals.VERTICIES__V3));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVerticiesAccess().getV1VertexParserRuleCall_2_0(), semanticObject.getV1());
		feeder.accept(grammarAccess.getVerticiesAccess().getV2VertexParserRuleCall_3_0(), semanticObject.getV2());
		feeder.accept(grammarAccess.getVerticiesAccess().getV3VertexParserRuleCall_4_0(), semanticObject.getV3());
		feeder.finish();
	}
	
	
}
