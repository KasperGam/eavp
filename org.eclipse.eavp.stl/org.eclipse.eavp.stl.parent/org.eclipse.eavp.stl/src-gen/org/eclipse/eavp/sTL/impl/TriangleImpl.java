/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.eavp.sTL.impl;

import org.eclipse.eavp.sTL.Normal;
import org.eclipse.eavp.sTL.STLPackage;
import org.eclipse.eavp.sTL.Triangle;
import org.eclipse.eavp.sTL.Verticies;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Triangle</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.eclipse.eavp.sTL.impl.TriangleImpl#getNormal <em>Normal</em>}</li>
 *   <li>{@link org.eclipse.eavp.sTL.impl.TriangleImpl#getVerticies <em>Verticies</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class TriangleImpl extends MinimalEObjectImpl.Container implements Triangle
{
  /**
   * The cached value of the '{@link #getNormal() <em>Normal</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNormal()
   * @generated
   * @ordered
   */
  protected Normal normal;

  /**
   * The cached value of the '{@link #getVerticies() <em>Verticies</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVerticies()
   * @generated
   * @ordered
   */
  protected Verticies verticies;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TriangleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return STLPackage.Literals.TRIANGLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Normal getNormal()
  {
    return normal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNormal(Normal newNormal, NotificationChain msgs)
  {
    Normal oldNormal = normal;
    normal = newNormal;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, STLPackage.TRIANGLE__NORMAL, oldNormal, newNormal);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNormal(Normal newNormal)
  {
    if (newNormal != normal)
    {
      NotificationChain msgs = null;
      if (normal != null)
        msgs = ((InternalEObject)normal).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - STLPackage.TRIANGLE__NORMAL, null, msgs);
      if (newNormal != null)
        msgs = ((InternalEObject)newNormal).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - STLPackage.TRIANGLE__NORMAL, null, msgs);
      msgs = basicSetNormal(newNormal, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STLPackage.TRIANGLE__NORMAL, newNormal, newNormal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Verticies getVerticies()
  {
    return verticies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVerticies(Verticies newVerticies, NotificationChain msgs)
  {
    Verticies oldVerticies = verticies;
    verticies = newVerticies;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, STLPackage.TRIANGLE__VERTICIES, oldVerticies, newVerticies);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVerticies(Verticies newVerticies)
  {
    if (newVerticies != verticies)
    {
      NotificationChain msgs = null;
      if (verticies != null)
        msgs = ((InternalEObject)verticies).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - STLPackage.TRIANGLE__VERTICIES, null, msgs);
      if (newVerticies != null)
        msgs = ((InternalEObject)newVerticies).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - STLPackage.TRIANGLE__VERTICIES, null, msgs);
      msgs = basicSetVerticies(newVerticies, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STLPackage.TRIANGLE__VERTICIES, newVerticies, newVerticies));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case STLPackage.TRIANGLE__NORMAL:
        return basicSetNormal(null, msgs);
      case STLPackage.TRIANGLE__VERTICIES:
        return basicSetVerticies(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case STLPackage.TRIANGLE__NORMAL:
        return getNormal();
      case STLPackage.TRIANGLE__VERTICIES:
        return getVerticies();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case STLPackage.TRIANGLE__NORMAL:
        setNormal((Normal)newValue);
        return;
      case STLPackage.TRIANGLE__VERTICIES:
        setVerticies((Verticies)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case STLPackage.TRIANGLE__NORMAL:
        setNormal((Normal)null);
        return;
      case STLPackage.TRIANGLE__VERTICIES:
        setVerticies((Verticies)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case STLPackage.TRIANGLE__NORMAL:
        return normal != null;
      case STLPackage.TRIANGLE__VERTICIES:
        return verticies != null;
    }
    return super.eIsSet(featureID);
  }

} //TriangleImpl
