<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="model" nsURI="http://www.eclipse.org/" nsPrefix="eavp">
  <eClassifiers xsi:type="ecore:EClass" name="MeshCache">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A MeshCache is a central repository for data objects of type T, where T is a data object specific to the rendering engine associated with the cache. The cache will be responsible for creating and maintaining these objects. The MeshCache will supply references to them to Meshes on request, allowing multiple Meshes to draw from the same data object as a part of the Flyweight pattern. "/>
    </eAnnotations>
    <eTypeParameters name="T"/>
    <eOperations name="getMesh">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Get the mesh for a given type, creating it if it does not already exist. It is assummed that all shapes of the type will make use of the same mesh, possibly transformed geometriclly, for rendering. For example, all shapes of type &quot;RECTANGULAR_PRISM&quot; might use the same eight pointed mesh, with each one distinguished by a differing position in three dimensional space or by changing its dimensions. The operation will return null for types which do not have such a prototypical mesh. In this case, getMesh(EEList&lt;Triangle>) should be used instead."/>
        <details key="body" value="// For the base implementation, assume that the cache was loaded during&#xD;&#xA;// initialization.&#xD;&#xA;return typeCache.get(type);"/>
      </eAnnotations>
      <eGenericType eTypeParameter="#//MeshCache/T"/>
      <eParameters name="type" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getMesh">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Get the mesh specified by the given triangles, creating it if it does not already exist. "/>
        <details key="body" value="// The ID of the triangle list&#xD;&#xA;int ID = -1;&#xD;&#xA;&#xD;&#xA;// Whether the triangle list has been found in the cache&#xD;&#xA;boolean found = false;&#xD;&#xA;&#xD;&#xA;// Convert the list to a set&#xD;&#xA;Set&lt;Triangle> triangleSet = new HashSet(triangles);&#xD;&#xA;&#xD;&#xA;// Check each set in the cache for a match&#xD;&#xA;for (int i : sourceTriangleCache.keySet()) {&#xD;&#xA;&#x9;ID = i;&#xD;&#xA;&#xD;&#xA;&#x9;// If a match is found, stop the search&#xD;&#xA;&#x9;if (triangleSet.equals(sourceTriangleCache.get(i))) {&#xD;&#xA;&#x9;&#x9;found = true;&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// If the list was found, return the mesh with the same ID&#xD;&#xA;if (found) {&#xD;&#xA;&#x9;return triangleCache.get(ID);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// If the list was not found, create a mesh based on it and insert both&#xD;&#xA;// into the caches.&#xD;&#xA;else {&#xD;&#xA;&#x9;sourceTriangleCache.put(ID, triangleSet);&#xD;&#xA;&#x9;T mesh = createMesh(triangles);&#xD;&#xA;&#x9;triangleCache.put(ID, mesh);&#xD;&#xA;&#x9;return mesh;&#xD;&#xA;}"/>
      </eAnnotations>
      <eGenericType eTypeParameter="#//MeshCache/T"/>
      <eParameters name="triangles">
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EEList">
          <eTypeArguments eClassifier="#//Triangle"/>
        </eGenericType>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RenderObject">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="The object responsible for maintaining the base mesh which will be used to render an INode. This mesh, of type T that is native to the graphical engine, will be retrieved from the MeshCache based on the properties of the source INode."/>
    </eAnnotations>
    <eTypeParameters name="T"/>
    <eOperations name="getMesh">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return render;"/>
      </eAnnotations>
      <eGenericType eTypeParameter="#//RenderObject/T"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="meshCache">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The cache from which the mesh will be pulled. It is intended that all RenderObjects in the same context should share the same meshCache."/>
      </eAnnotations>
      <eGenericType eClassifier="#//MeshCache">
        <eTypeArguments/>
      </eGenericType>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="render">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The rendered object which can be provided to the graphics engine in order for a shape to be drawn."/>
        <details key="suppressedSetVisibility" value="true"/>
      </eAnnotations>
      <eGenericType eTypeParameter="#//RenderObject/T"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="source" eType="#//INode">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The wrapped source object whose data will be used to render a shape in the graphics engine."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eGenericSuperTypes eClassifier="#//IRenderElement">
      <eTypeArguments eTypeParameter="#//RenderObject/T"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RenderObjectDecorator">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A decorator for a RenderObject. A RenderObjectDecorator will be responsible for applying a single, well defined graphical change to the RenderObject to which it is applied."/>
    </eAnnotations>
    <eTypeParameters name="T"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="source">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The wrapped object to which this object will apply its change."/>
      </eAnnotations>
      <eGenericType eClassifier="#//IRenderElement">
        <eTypeArguments eTypeParameter="#//RenderObjectDecorator/T"/>
      </eGenericType>
    </eStructuralFeatures>
    <eGenericSuperTypes eClassifier="#//IRenderElement">
      <eTypeArguments eTypeParameter="#//RenderObjectDecorator/T"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TextureDecorator">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A decorator which applies a texture to the wrapped object's rendering."/>
    </eAnnotations>
    <eTypeParameters name="T"/>
    <eGenericSuperTypes eClassifier="#//RenderObjectDecorator">
      <eTypeArguments eTypeParameter="#//TextureDecorator/T"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OpacityDecorator">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A decorator which sets the wrapped object's rendering to a specified amount of opacity."/>
    </eAnnotations>
    <eTypeParameters name="T"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="opacity" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDouble"
        defaultValueLiteral="100.0">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="How opaque to render the object. Opacity is measured on a scale from 0 (fully transparent) to 1 (fully opaque)."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eGenericSuperTypes eClassifier="#//RenderObjectDecorator">
      <eTypeArguments eTypeParameter="#//OpacityDecorator/T"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WireframeDecorator">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A decorator which can change the object's rendering to appear in wireframe mode."/>
    </eAnnotations>
    <eTypeParameters name="T"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="wireframe" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Whether the object is to be rendered as a wireframe. If true, it will be displayed as a wireframe and if false it will be displayed as a solid object."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eGenericSuperTypes eClassifier="#//RenderObjectDecorator">
      <eTypeArguments eTypeParameter="#//WireframeDecorator/T"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ColorDecorator">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A decorator which applies a color to a rendered object."/>
    </eAnnotations>
    <eTypeParameters name="T"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="red" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The amount of red in the object's color, on a scale from 0 to 255."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="green" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The amount of green in the object's color, on a scale from 0 to 255."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="blue" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The amount of blue in the object's color, on a scale from 0 to 255."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eGenericSuperTypes eClassifier="#//RenderObjectDecorator">
      <eTypeArguments eTypeParameter="#//ColorDecorator/T"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IRenderElement" abstract="true" interface="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An element in the geometry which will be rendered inside the graphical engine. T is to be some data type native to the graphical engine."/>
    </eAnnotations>
    <eTypeParameters name="T"/>
    <eOperations name="getMesh">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Get the rendered object."/>
      </eAnnotations>
      <eGenericType eTypeParameter="#//IRenderElement/T"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="INode" instanceClassName="geometry.INode">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="This class represents a file path on the file system."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="Triangle" instanceClassName="geometry.Triangle"/>
</ecore:EPackage>
