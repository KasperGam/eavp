/*
 * generated by Xtext 2.10.0
 */
grammar InternalOBJ;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.eclipse.january.geometry.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.january.geometry.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.january.geometry.xtext.services.OBJGrammarAccess;

}
@parser::members {
	private OBJGrammarAccess grammarAccess;

	public void setGrammarAccess(OBJGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGeometry
entryRuleGeometry
:
{ before(grammarAccess.getGeometryRule()); }
	 ruleGeometry
{ after(grammarAccess.getGeometryRule()); } 
	 EOF 
;

// Rule Geometry
ruleGeometry 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeometryAccess().getAlternatives()); }
		(rule__Geometry__Alternatives)*
		{ after(grammarAccess.getGeometryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertexSource
entryRuleVertexSource
:
{ before(grammarAccess.getVertexSourceRule()); }
	 ruleVertexSource
{ after(grammarAccess.getVertexSourceRule()); } 
	 EOF 
;

// Rule VertexSource
ruleVertexSource 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexSourceAccess().getGroup()); }
		(rule__VertexSource__Group__0)
		{ after(grammarAccess.getVertexSourceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolyShape
entryRulePolyShape
:
{ before(grammarAccess.getPolyShapeRule()); }
	 rulePolyShape
{ after(grammarAccess.getPolyShapeRule()); } 
	 EOF 
;

// Rule PolyShape
rulePolyShape 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolyShapeAccess().getGroup()); }
		(rule__PolyShape__Group__0)
		{ after(grammarAccess.getPolyShapeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFace
entryRuleFace
:
{ before(grammarAccess.getFaceRule()); }
	 ruleFace
{ after(grammarAccess.getFaceRule()); } 
	 EOF 
;

// Rule Face
ruleFace 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFaceAccess().getGroup()); }
		(rule__Face__Group__0)
		{ after(grammarAccess.getFaceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertex
entryRuleVertex
:
{ before(grammarAccess.getVertexRule()); }
	 ruleVertex
{ after(grammarAccess.getVertexRule()); } 
	 EOF 
;

// Rule Vertex
ruleVertex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexAccess().getGroup()); }
		(rule__Vertex__Group__0)
		{ after(grammarAccess.getVertexAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTextureVertex
entryRuleTextureVertex
:
{ before(grammarAccess.getTextureVertexRule()); }
	 ruleTextureVertex
{ after(grammarAccess.getTextureVertexRule()); } 
	 EOF 
;

// Rule TextureVertex
ruleTextureVertex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTextureVertexAccess().getGroup()); }
		(rule__TextureVertex__Group__0)
		{ after(grammarAccess.getTextureVertexAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMaterial
entryRuleMaterial
:
{ before(grammarAccess.getMaterialRule()); }
	 ruleMaterial
{ after(grammarAccess.getMaterialRule()); } 
	 EOF 
;

// Rule Material
ruleMaterial 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMaterialAccess().getGroup()); }
		(rule__Material__Group__0)
		{ after(grammarAccess.getMaterialAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getEStringAccess().getAlternatives()); }
			(rule__EString__Alternatives)
			{ after(grammarAccess.getEStringAccess().getAlternatives()); }
		)
		(
			{ before(grammarAccess.getEStringAccess().getAlternatives()); }
			(rule__EString__Alternatives)*
			{ after(grammarAccess.getEStringAccess().getAlternatives()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEDouble
entryRuleEDouble
:
{ before(grammarAccess.getEDoubleRule()); }
	 ruleEDouble
{ after(grammarAccess.getEDoubleRule()); } 
	 EOF 
;

// Rule EDouble
ruleEDouble 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEDoubleAccess().getAlternatives()); }
		(rule__EDouble__Alternatives)
		{ after(grammarAccess.getEDoubleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeometryAccess().getVertexSourcesAssignment_0()); }
		(rule__Geometry__VertexSourcesAssignment_0)
		{ after(grammarAccess.getGeometryAccess().getVertexSourcesAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getGeometryAccess().getNodesAssignment_1()); }
		(rule__Geometry__NodesAssignment_1)
		{ after(grammarAccess.getGeometryAccess().getNodesAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexSourceAccess().getGroup_3_0()); }
		(rule__VertexSource__Group_3_0__0)
		{ after(grammarAccess.getVertexSourceAccess().getGroup_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getVertexSourceAccess().getGroup_3_1()); }
		(rule__VertexSource__Group_3_1__0)
		{ after(grammarAccess.getVertexSourceAccess().getGroup_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getVertexSourceAccess().getGroup_3_2()); }
		(rule__VertexSource__Group_3_2__0)
		{ after(grammarAccess.getVertexSourceAccess().getGroup_3_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyShapeAccess().getGroup_4_0()); }
		(rule__PolyShape__Group_4_0__0)
		{ after(grammarAccess.getPolyShapeAccess().getGroup_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getPolyShapeAccess().getGroup_4_1()); }
		(rule__PolyShape__Group_4_1__0)
		{ after(grammarAccess.getPolyShapeAccess().getGroup_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Alternatives_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyShapeAccess().getEIntParserRuleCall_4_1_1_0()); }
		ruleEInt
		{ after(grammarAccess.getPolyShapeAccess().getEIntParserRuleCall_4_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPolyShapeAccess().getOffKeyword_4_1_1_1()); }
		'off'
		{ after(grammarAccess.getPolyShapeAccess().getOffKeyword_4_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Alternatives_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFaceAccess().getTextureIndicesAssignment_1_1_1_0()); }
		(rule__Face__TextureIndicesAssignment_1_1_1_0)
		{ after(grammarAccess.getFaceAccess().getTextureIndicesAssignment_1_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getFaceAccess().getGroup_1_1_1_1()); }
		(rule__Face__Group_1_1_1_1__0)
		{ after(grammarAccess.getFaceAccess().getGroup_1_1_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getFaceAccess().getGroup_1_1_1_2()); }
		(rule__Face__Group_1_1_1_2__0)
		{ after(grammarAccess.getFaceAccess().getGroup_1_1_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getINTTerminalRuleCall_2()); }
		RULE_INT
		{ after(grammarAccess.getEStringAccess().getINTTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getFullStopKeyword_3()); }
		'.'
		{ after(grammarAccess.getEStringAccess().getFullStopKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getSolidusKeyword_4()); }
		'/'
		{ after(grammarAccess.getEStringAccess().getSolidusKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getReverseSolidusKeyword_5()); }
		'\\'
		{ after(grammarAccess.getEStringAccess().getReverseSolidusKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getColonKeyword_6()); }
		':'
		{ after(grammarAccess.getEStringAccess().getColonKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().get_Keyword_7()); }
		'_'
		{ after(grammarAccess.getEStringAccess().get_Keyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getHyphenMinusKeyword_8()); }
		'-'
		{ after(grammarAccess.getEStringAccess().getHyphenMinusKeyword_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEDoubleAccess().getDOUBLETerminalRuleCall_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getEDoubleAccess().getDOUBLETerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEDoubleAccess().getEIntParserRuleCall_1()); }
		ruleEInt
		{ after(grammarAccess.getEDoubleAccess().getEIntParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group__0__Impl
	rule__VertexSource__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getVertexSourceAction_0()); }
	()
	{ after(grammarAccess.getVertexSourceAccess().getVertexSourceAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group__1__Impl
	rule__VertexSource__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getGroup_1()); }
	(rule__VertexSource__Group_1__0)*
	{ after(grammarAccess.getVertexSourceAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group__2__Impl
	rule__VertexSource__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getGroup_2()); }
	(rule__VertexSource__Group_2__0)?
	{ after(grammarAccess.getVertexSourceAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getVertexSourceAccess().getAlternatives_3()); }
		(rule__VertexSource__Alternatives_3)
		{ after(grammarAccess.getVertexSourceAccess().getAlternatives_3()); }
	)
	(
		{ before(grammarAccess.getVertexSourceAccess().getAlternatives_3()); }
		(rule__VertexSource__Alternatives_3)*
		{ after(grammarAccess.getVertexSourceAccess().getAlternatives_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexSource__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_1__0__Impl
	rule__VertexSource__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getMtllibKeyword_1_0()); }
	'mtllib'
	{ after(grammarAccess.getVertexSourceAccess().getMtllibKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getMaterialFilesAssignment_1_1()); }
	(rule__VertexSource__MaterialFilesAssignment_1_1)
	{ after(grammarAccess.getVertexSourceAccess().getMaterialFilesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexSource__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_2__0__Impl
	rule__VertexSource__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getGKeyword_2_0()); }
	'g'
	{ after(grammarAccess.getVertexSourceAccess().getGKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getEStringParserRuleCall_2_1()); }
	(ruleEString)?
	{ after(grammarAccess.getVertexSourceAccess().getEStringParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexSource__Group_3_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_3_0__0__Impl
	rule__VertexSource__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getVKeyword_3_0_0()); }
	'v'
	{ after(grammarAccess.getVertexSourceAccess().getVKeyword_3_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_3_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getVerticesAssignment_3_0_1()); }
	(rule__VertexSource__VerticesAssignment_3_0_1)
	{ after(grammarAccess.getVertexSourceAccess().getVerticesAssignment_3_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexSource__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_3_1__0__Impl
	rule__VertexSource__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getVtKeyword_3_1_0()); }
	'vt'
	{ after(grammarAccess.getVertexSourceAccess().getVtKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getTextureCoordinatesAssignment_3_1_1()); }
	(rule__VertexSource__TextureCoordinatesAssignment_3_1_1)
	{ after(grammarAccess.getVertexSourceAccess().getTextureCoordinatesAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexSource__Group_3_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_3_2__0__Impl
	rule__VertexSource__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getVnKeyword_3_2_0()); }
	'vn'
	{ after(grammarAccess.getVertexSourceAccess().getVnKeyword_3_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_3_2__1__Impl
	rule__VertexSource__Group_3_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getEDoubleParserRuleCall_3_2_1()); }
	ruleEDouble
	{ after(grammarAccess.getVertexSourceAccess().getEDoubleParserRuleCall_3_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_3_2__2__Impl
	rule__VertexSource__Group_3_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getEDoubleParserRuleCall_3_2_2()); }
	ruleEDouble
	{ after(grammarAccess.getVertexSourceAccess().getEDoubleParserRuleCall_3_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_3_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_3_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getEDoubleParserRuleCall_3_2_3()); }
	ruleEDouble
	{ after(grammarAccess.getVertexSourceAccess().getEDoubleParserRuleCall_3_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyShape__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group__0__Impl
	rule__PolyShape__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getPolyShapeAction_0()); }
	()
	{ after(grammarAccess.getPolyShapeAccess().getPolyShapeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group__1__Impl
	rule__PolyShape__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getGroup_1()); }
	(rule__PolyShape__Group_1__0)*
	{ after(grammarAccess.getPolyShapeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group__2__Impl
	rule__PolyShape__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getGroup_2()); }
	(rule__PolyShape__Group_2__0)?
	{ after(grammarAccess.getPolyShapeAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group__3__Impl
	rule__PolyShape__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getGroup_3()); }
	(rule__PolyShape__Group_3__0)?
	{ after(grammarAccess.getPolyShapeAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPolyShapeAccess().getAlternatives_4()); }
		(rule__PolyShape__Alternatives_4)
		{ after(grammarAccess.getPolyShapeAccess().getAlternatives_4()); }
	)
	(
		{ before(grammarAccess.getPolyShapeAccess().getAlternatives_4()); }
		(rule__PolyShape__Alternatives_4)*
		{ after(grammarAccess.getPolyShapeAccess().getAlternatives_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyShape__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group_1__0__Impl
	rule__PolyShape__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getMtllibKeyword_1_0()); }
	'mtllib'
	{ after(grammarAccess.getPolyShapeAccess().getMtllibKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getMaterialFilesAssignment_1_1()); }
	(rule__PolyShape__MaterialFilesAssignment_1_1)
	{ after(grammarAccess.getPolyShapeAccess().getMaterialFilesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyShape__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group_2__0__Impl
	rule__PolyShape__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getGKeyword_2_0()); }
	'g'
	{ after(grammarAccess.getPolyShapeAccess().getGKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getNameAssignment_2_1()); }
	(rule__PolyShape__NameAssignment_2_1)?
	{ after(grammarAccess.getPolyShapeAccess().getNameAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyShape__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group_3__0__Impl
	rule__PolyShape__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getUsemtlKeyword_3_0()); }
	'usemtl'
	{ after(grammarAccess.getPolyShapeAccess().getUsemtlKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getMaterialAssignment_3_1()); }
	(rule__PolyShape__MaterialAssignment_3_1)
	{ after(grammarAccess.getPolyShapeAccess().getMaterialAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyShape__Group_4_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group_4_0__0__Impl
	rule__PolyShape__Group_4_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_4_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getFKeyword_4_0_0()); }
	'f'
	{ after(grammarAccess.getPolyShapeAccess().getFKeyword_4_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_4_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group_4_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_4_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getFacesAssignment_4_0_1()); }
	(rule__PolyShape__FacesAssignment_4_0_1)
	{ after(grammarAccess.getPolyShapeAccess().getFacesAssignment_4_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyShape__Group_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group_4_1__0__Impl
	rule__PolyShape__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getSKeyword_4_1_0()); }
	's'
	{ after(grammarAccess.getPolyShapeAccess().getSKeyword_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getAlternatives_4_1_1()); }
	(rule__PolyShape__Alternatives_4_1_1)
	{ after(grammarAccess.getPolyShapeAccess().getAlternatives_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Face__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group__0__Impl
	rule__Face__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getFaceAction_0()); }
	()
	{ after(grammarAccess.getFaceAccess().getFaceAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getGroup_1()); }
	(rule__Face__Group_1__0)*
	{ after(grammarAccess.getFaceAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Face__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group_1__0__Impl
	rule__Face__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getVertexIndicesAssignment_1_0()); }
	(rule__Face__VertexIndicesAssignment_1_0)
	{ after(grammarAccess.getFaceAccess().getVertexIndicesAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getGroup_1_1()); }
	(rule__Face__Group_1_1__0)?
	{ after(grammarAccess.getFaceAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Face__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group_1_1__0__Impl
	rule__Face__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getSolidusKeyword_1_1_0()); }
	'/'
	{ after(grammarAccess.getFaceAccess().getSolidusKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getAlternatives_1_1_1()); }
	(rule__Face__Alternatives_1_1_1)
	{ after(grammarAccess.getFaceAccess().getAlternatives_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Face__Group_1_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group_1_1_1_1__0__Impl
	rule__Face__Group_1_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getTextureIndicesAssignment_1_1_1_1_0()); }
	(rule__Face__TextureIndicesAssignment_1_1_1_1_0)
	{ after(grammarAccess.getFaceAccess().getTextureIndicesAssignment_1_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group_1_1_1_1__1__Impl
	rule__Face__Group_1_1_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getSolidusKeyword_1_1_1_1_1()); }
	'/'
	{ after(grammarAccess.getFaceAccess().getSolidusKeyword_1_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1_1_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group_1_1_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1_1_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getEIntParserRuleCall_1_1_1_1_2()); }
	ruleEInt
	{ after(grammarAccess.getFaceAccess().getEIntParserRuleCall_1_1_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Face__Group_1_1_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group_1_1_1_2__0__Impl
	rule__Face__Group_1_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1_1_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getSolidusKeyword_1_1_1_2_0()); }
	'/'
	{ after(grammarAccess.getFaceAccess().getSolidusKeyword_1_1_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1_1_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group_1_1_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group_1_1_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getEIntParserRuleCall_1_1_1_2_1()); }
	ruleEInt
	{ after(grammarAccess.getFaceAccess().getEIntParserRuleCall_1_1_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vertex__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__0__Impl
	rule__Vertex__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getVertexAction_0()); }
	()
	{ after(grammarAccess.getVertexAccess().getVertexAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__1__Impl
	rule__Vertex__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getXAssignment_1()); }
	(rule__Vertex__XAssignment_1)
	{ after(grammarAccess.getVertexAccess().getXAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__2__Impl
	rule__Vertex__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getYAssignment_2()); }
	(rule__Vertex__YAssignment_2)
	{ after(grammarAccess.getVertexAccess().getYAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getZAssignment_3()); }
	(rule__Vertex__ZAssignment_3)
	{ after(grammarAccess.getVertexAccess().getZAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TextureVertex__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TextureVertex__Group__0__Impl
	rule__TextureVertex__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextureVertex__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTextureVertexAccess().getXAssignment_0()); }
	(rule__TextureVertex__XAssignment_0)
	{ after(grammarAccess.getTextureVertexAccess().getXAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextureVertex__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TextureVertex__Group__1__Impl
	rule__TextureVertex__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TextureVertex__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTextureVertexAccess().getYAssignment_1()); }
	(rule__TextureVertex__YAssignment_1)
	{ after(grammarAccess.getTextureVertexAccess().getYAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextureVertex__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TextureVertex__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextureVertex__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTextureVertexAccess().getZAssignment_2()); }
	(rule__TextureVertex__ZAssignment_2)?
	{ after(grammarAccess.getTextureVertexAccess().getZAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Material__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Material__Group__0__Impl
	rule__Material__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Material__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaterialAccess().getMaterialAction_0()); }
	()
	{ after(grammarAccess.getMaterialAccess().getMaterialAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Material__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Material__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Material__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaterialAccess().getPhongMatNameAssignment_1()); }
	(rule__Material__PhongMatNameAssignment_1)
	{ after(grammarAccess.getMaterialAccess().getPhongMatNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__VertexSourcesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeometryAccess().getVertexSourcesVertexSourceParserRuleCall_0_0()); }
		ruleVertexSource
		{ after(grammarAccess.getGeometryAccess().getVertexSourcesVertexSourceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__NodesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeometryAccess().getNodesPolyShapeParserRuleCall_1_0()); }
		rulePolyShape
		{ after(grammarAccess.getGeometryAccess().getNodesPolyShapeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__MaterialFilesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexSourceAccess().getMaterialFilesEStringParserRuleCall_1_1_0()); }
		ruleEString
		{ after(grammarAccess.getVertexSourceAccess().getMaterialFilesEStringParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__VerticesAssignment_3_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexSourceAccess().getVerticesVertexParserRuleCall_3_0_1_0()); }
		ruleVertex
		{ after(grammarAccess.getVertexSourceAccess().getVerticesVertexParserRuleCall_3_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__TextureCoordinatesAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexSourceAccess().getTextureCoordinatesTextureVertexParserRuleCall_3_1_1_0()); }
		ruleTextureVertex
		{ after(grammarAccess.getVertexSourceAccess().getTextureCoordinatesTextureVertexParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__MaterialFilesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyShapeAccess().getMaterialFilesEStringParserRuleCall_1_1_0()); }
		ruleEString
		{ after(grammarAccess.getPolyShapeAccess().getMaterialFilesEStringParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__NameAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyShapeAccess().getNameEStringParserRuleCall_2_1_0()); }
		ruleEString
		{ after(grammarAccess.getPolyShapeAccess().getNameEStringParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__MaterialAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyShapeAccess().getMaterialMaterialParserRuleCall_3_1_0()); }
		ruleMaterial
		{ after(grammarAccess.getPolyShapeAccess().getMaterialMaterialParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__FacesAssignment_4_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyShapeAccess().getFacesFaceParserRuleCall_4_0_1_0()); }
		ruleFace
		{ after(grammarAccess.getPolyShapeAccess().getFacesFaceParserRuleCall_4_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__VertexIndicesAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFaceAccess().getVertexIndicesEIntParserRuleCall_1_0_0()); }
		ruleEInt
		{ after(grammarAccess.getFaceAccess().getVertexIndicesEIntParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__TextureIndicesAssignment_1_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFaceAccess().getTextureIndicesEIntParserRuleCall_1_1_1_0_0()); }
		ruleEInt
		{ after(grammarAccess.getFaceAccess().getTextureIndicesEIntParserRuleCall_1_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__TextureIndicesAssignment_1_1_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFaceAccess().getTextureIndicesEIntParserRuleCall_1_1_1_1_0_0()); }
		ruleEInt
		{ after(grammarAccess.getFaceAccess().getTextureIndicesEIntParserRuleCall_1_1_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__XAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexAccess().getXEDoubleParserRuleCall_1_0()); }
		ruleEDouble
		{ after(grammarAccess.getVertexAccess().getXEDoubleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__YAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexAccess().getYEDoubleParserRuleCall_2_0()); }
		ruleEDouble
		{ after(grammarAccess.getVertexAccess().getYEDoubleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__ZAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexAccess().getZEDoubleParserRuleCall_3_0()); }
		ruleEDouble
		{ after(grammarAccess.getVertexAccess().getZEDoubleParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextureVertex__XAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextureVertexAccess().getXEDoubleParserRuleCall_0_0()); }
		ruleEDouble
		{ after(grammarAccess.getTextureVertexAccess().getXEDoubleParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextureVertex__YAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextureVertexAccess().getYEDoubleParserRuleCall_1_0()); }
		ruleEDouble
		{ after(grammarAccess.getTextureVertexAccess().getYEDoubleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextureVertex__ZAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextureVertexAccess().getZEDoubleParserRuleCall_2_0()); }
		ruleEDouble
		{ after(grammarAccess.getTextureVertexAccess().getZEDoubleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Material__PhongMatNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMaterialAccess().getPhongMatNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getMaterialAccess().getPhongMatNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_DOUBLE : ('-'|'+')? RULE_INT? '.' RULE_INT (('E'|'e') ('-'|'+')? RULE_INT)?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_ANY_OTHER : .;
