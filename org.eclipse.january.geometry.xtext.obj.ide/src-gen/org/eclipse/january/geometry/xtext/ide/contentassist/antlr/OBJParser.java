/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.january.geometry.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.january.geometry.xtext.ide.contentassist.antlr.internal.InternalOBJParser;
import org.eclipse.january.geometry.xtext.services.OBJGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class OBJParser extends AbstractContentAssistParser {

	@Inject
	private OBJGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalOBJParser createParser() {
		InternalOBJParser result = new InternalOBJParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getGeometryAccess().getAlternatives(), "rule__Geometry__Alternatives");
					put(grammarAccess.getVertexSourceAccess().getAlternatives_3(), "rule__VertexSource__Alternatives_3");
					put(grammarAccess.getPolyShapeAccess().getAlternatives_4(), "rule__PolyShape__Alternatives_4");
					put(grammarAccess.getPolyShapeAccess().getAlternatives_4_1_1(), "rule__PolyShape__Alternatives_4_1_1");
					put(grammarAccess.getFaceAccess().getAlternatives_1_1_1(), "rule__Face__Alternatives_1_1_1");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEDoubleAccess().getAlternatives(), "rule__EDouble__Alternatives");
					put(grammarAccess.getVertexSourceAccess().getGroup(), "rule__VertexSource__Group__0");
					put(grammarAccess.getVertexSourceAccess().getGroup_1(), "rule__VertexSource__Group_1__0");
					put(grammarAccess.getVertexSourceAccess().getGroup_2(), "rule__VertexSource__Group_2__0");
					put(grammarAccess.getVertexSourceAccess().getGroup_3_0(), "rule__VertexSource__Group_3_0__0");
					put(grammarAccess.getVertexSourceAccess().getGroup_3_1(), "rule__VertexSource__Group_3_1__0");
					put(grammarAccess.getVertexSourceAccess().getGroup_3_2(), "rule__VertexSource__Group_3_2__0");
					put(grammarAccess.getPolyShapeAccess().getGroup(), "rule__PolyShape__Group__0");
					put(grammarAccess.getPolyShapeAccess().getGroup_1(), "rule__PolyShape__Group_1__0");
					put(grammarAccess.getPolyShapeAccess().getGroup_2(), "rule__PolyShape__Group_2__0");
					put(grammarAccess.getPolyShapeAccess().getGroup_3(), "rule__PolyShape__Group_3__0");
					put(grammarAccess.getPolyShapeAccess().getGroup_4_0(), "rule__PolyShape__Group_4_0__0");
					put(grammarAccess.getPolyShapeAccess().getGroup_4_1(), "rule__PolyShape__Group_4_1__0");
					put(grammarAccess.getFaceAccess().getGroup(), "rule__Face__Group__0");
					put(grammarAccess.getFaceAccess().getGroup_1(), "rule__Face__Group_1__0");
					put(grammarAccess.getFaceAccess().getGroup_1_1(), "rule__Face__Group_1_1__0");
					put(grammarAccess.getFaceAccess().getGroup_1_1_1_1(), "rule__Face__Group_1_1_1_1__0");
					put(grammarAccess.getFaceAccess().getGroup_1_1_1_2(), "rule__Face__Group_1_1_1_2__0");
					put(grammarAccess.getVertexAccess().getGroup(), "rule__Vertex__Group__0");
					put(grammarAccess.getTextureVertexAccess().getGroup(), "rule__TextureVertex__Group__0");
					put(grammarAccess.getMaterialAccess().getGroup(), "rule__Material__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getGeometryAccess().getVertexSourcesAssignment_0(), "rule__Geometry__VertexSourcesAssignment_0");
					put(grammarAccess.getGeometryAccess().getNodesAssignment_1(), "rule__Geometry__NodesAssignment_1");
					put(grammarAccess.getVertexSourceAccess().getMaterialFilesAssignment_1_1(), "rule__VertexSource__MaterialFilesAssignment_1_1");
					put(grammarAccess.getVertexSourceAccess().getVerticesAssignment_3_0_1(), "rule__VertexSource__VerticesAssignment_3_0_1");
					put(grammarAccess.getVertexSourceAccess().getTextureCoordinatesAssignment_3_1_1(), "rule__VertexSource__TextureCoordinatesAssignment_3_1_1");
					put(grammarAccess.getPolyShapeAccess().getMaterialFilesAssignment_1_1(), "rule__PolyShape__MaterialFilesAssignment_1_1");
					put(grammarAccess.getPolyShapeAccess().getNameAssignment_2_1(), "rule__PolyShape__NameAssignment_2_1");
					put(grammarAccess.getPolyShapeAccess().getMaterialAssignment_3_1(), "rule__PolyShape__MaterialAssignment_3_1");
					put(grammarAccess.getPolyShapeAccess().getFacesAssignment_4_0_1(), "rule__PolyShape__FacesAssignment_4_0_1");
					put(grammarAccess.getFaceAccess().getVertexIndicesAssignment_1_0(), "rule__Face__VertexIndicesAssignment_1_0");
					put(grammarAccess.getFaceAccess().getTextureIndicesAssignment_1_1_1_0(), "rule__Face__TextureIndicesAssignment_1_1_1_0");
					put(grammarAccess.getFaceAccess().getTextureIndicesAssignment_1_1_1_1_0(), "rule__Face__TextureIndicesAssignment_1_1_1_1_0");
					put(grammarAccess.getVertexAccess().getXAssignment_1(), "rule__Vertex__XAssignment_1");
					put(grammarAccess.getVertexAccess().getYAssignment_2(), "rule__Vertex__YAssignment_2");
					put(grammarAccess.getVertexAccess().getZAssignment_3(), "rule__Vertex__ZAssignment_3");
					put(grammarAccess.getTextureVertexAccess().getXAssignment_0(), "rule__TextureVertex__XAssignment_0");
					put(grammarAccess.getTextureVertexAccess().getYAssignment_1(), "rule__TextureVertex__YAssignment_1");
					put(grammarAccess.getTextureVertexAccess().getZAssignment_2(), "rule__TextureVertex__ZAssignment_2");
					put(grammarAccess.getMaterialAccess().getPhongMatNameAssignment_1(), "rule__Material__PhongMatNameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalOBJParser typedParser = (InternalOBJParser) parser;
			typedParser.entryRuleGeometry();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_SL_COMMENT", "RULE_WS" };
	}

	public OBJGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(OBJGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
